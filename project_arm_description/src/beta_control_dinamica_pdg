#!/usr/bin/env python3

import rospy
from sensor_msgs.msg import JointState
from scipy.interpolate import CubicSpline

from roslib import packages
import numpy as np
import rbdl
from std_msgs.msg import Float64


from threading import Condition

def generate_spline_trajectory(start_q, end_q, num_points=100):
    #Genera una trayectoria suave usando splines c√∫bicos
    t = np.linspace(0, 1, num_points + 1)
    trajectory = []
    for i in range(len(start_q)):
        cs = CubicSpline([0, 1], [start_q[i], end_q[i]], bc_type='clamped')
        trajectory.append(cs(t))
    return np.array(trajectory).T

class robot_force_control:
    def __init__(self):
        self.joint_1_pub = rospy.Publisher('/project_arm/joint_1_position_controller/command', Float64, queue_size=10)
        self.joint_2_pub = rospy.Publisher('/project_arm/joint_2_position_controller/command', Float64, queue_size=10)
        self.joint_3_pub = rospy.Publisher('/project_arm/joint_3_position_controller/command', Float64, queue_size=10)
        self.joint_4_pub = rospy.Publisher('/project_arm/joint_4_position_controller/command', Float64, queue_size=10)
        self.joint_5_pub = rospy.Publisher('/project_arm/joint_5_position_controller/command', Float64, queue_size=10)
        self.joint_6_pub = rospy.Publisher('/project_arm/joint_6_position_controller/command', Float64, queue_size=10)
        self.joint_7_pub = rospy.Publisher('/project_arm/joint_7_position_controller/command', Float64, queue_size=10)
        #self.pub = rospy.Publisher('/project_arm/joint_states', JointState, queue_size=10)
  
        self.position = []
        self.velocity = []
        self.cv = Condition()
        rospy.Subscriber('/project_arm/joint_states', JointState, self.joint_states_callback)

        # Espera hasta recibir un mensaje
        with self.cv:
            while not self.position:
                self.cv.wait()

    def joint_states_callback(self, msg):
        with self.cv:
            self.velocity = msg.velocity
            self.position = msg.position
            self.cv.notify_all()

    def joint_force_set(self, positions):
        if len(positions) == 7:
            self.joint_1_pub.publish(Float64(positions[0]))
            self.joint_2_pub.publish(Float64(positions[1]))
            self.joint_3_pub.publish(Float64(positions[2]))
            self.joint_4_pub.publish(Float64(positions[3]))
            self.joint_5_pub.publish(Float64(positions[4]))
            self.joint_6_pub.publish(Float64(positions[5]))
            self.joint_7_pub.publish(Float64(positions[6]))
        else:
            rospy.logwarn("Received joint positions array with incorrect length: expected 7, got %d", len(positions))



if __name__ == '__main__':
    
    rospy.init_node("control_dinamico")
    gazebo = robot_force_control()

    # Nombres de las articulaciones
    jnames = ['joint_1',
              'joint_2',
              'joint_3',
              'joint_4',
              'joint_5',
              'joint_6',
              'joint_7',]
    # Objeto (mensaje) de tipo JointState
    jstate = JointState()
    jstate.name = jnames

    # Valores del mensaje
    
    

    # Frecuencia del envio (en Hz)
    freq = 50
    dt = 1.0/freq
    rate = rospy.Rate(freq)

    # Modelo RBDL
    modelo = rbdl.loadModel('/home/pedro/lab_ws/src/Robot-Manipulador-6-DoF/project_arm_description/urdf/robot.urdf')
    ndof   = modelo.q_size     # Grados de libertad
    
    Kp = np.diag(np.full(7,10))
    Kd = np.diag(np.full(7,20))
    
    Kp[3,3] = 8
    Kd[3,3] = 9
    Kp[4,4] = 90
    Kd[4,4] = 9

    Kp[6,6] = 100
    Kd[6,6] = 0

    print(Kp)

    q = np.array(gazebo.position)
    qdes2 = np.array([0, 1.37, -1.37, 0, 0, 0, 0.00])
    qdes3 = generate_spline_trajectory(q, qdes2, num_points=50)
    

    # Simulador dinamico del robot
    g     = np.zeros(ndof)  
    c     = np.zeros(ndof)  
    zeros = np.zeros(ndof) 
    f = np.zeros(ndof)
    Mddq = np.zeros(ndof)
    b2 = np.zeros(ndof)
    tau = np.zeros(ndof)
    M2 = np.zeros([ndof, ndof])
    dqlas = np.zeros(ndof)
    # Bucle de ejecucion continua
    t = 0.0

    i = 10
    while not rospy.is_shutdown():
        
        # =============================================================
        # Configuracion articular
        q = np.array(gazebo.position)
        dq = np.array(gazebo.velocity)
        ddq = (-dqlas + dq)/dt
        dqlas = dq

        # Configuracion articular deseada
        q = np.array(gazebo.position)
        qdes = qdes2
        
        qddes = np.array([0, 0, 0, 0, 0, 0, 0])
        # =============================================================
        
        # ----------------------------
        # Control dinamico (COMPLETAR)
        # ----------------------------
        rbdl.InverseDynamics(modelo, q, zeros, zeros, g)
        rbdl.InverseDynamics(modelo, q, dq, ddq, tau)
        rbdl.CompositeRigidBodyAlgorithm(modelo, q, M2)
        rbdl.NonlinearEffects(modelo, q, dq, b2)
        c = b2-g
        #print(np.round(q*qdes,2))
        # U = g + kp * (qdes-q) - kd *dq (PD + gravedad)
        u =g+ np.dot(Kp, (qdes - q)) - np.dot(Kd, dq)
        
        #u = tau
        #u = np.dot( M2, ddq+np.dot(Kp, (qdes - q)) + np.dot(Kd, (qddes - dq))  ) - c + g
        #print((qdes-q)[0:4])
        #print((qdes - q)[4:7])
        #print(dq[4:7])
        #print(u[4:7])
        if(np.linalg.norm(qdes[0:5] - q[0:5]) < 0.01):
            break
            i=i+10
        gazebo.joint_force_set(u)

        jstate.header.stamp = rospy.Time.now()
        jstate.position = u
        #gazebo.pub.publish(jstate)
        print(np.round(qdes[0:6] - q[0:6],3))        
        rate.sleep()
